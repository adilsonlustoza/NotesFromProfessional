{"ast":null,"code":"import { of } from 'rxjs';\nimport { TextboxQuestion } from '../models/TextboxQuestion';\nimport { DropDownQuestion } from '../models/DropDownQuestion';\nimport * as i0 from \"@angular/core\";\nexport class QuestionService {\n  constructor() {}\n  getQuestions() {\n    const questions = [new DropDownQuestion({\n      key: 'brave',\n      label: 'Bravery Rating',\n      options: [{\n        key: 'solid',\n        value: 'Solid'\n      }, {\n        key: 'great',\n        value: 'Great'\n      }, {\n        key: 'good',\n        value: 'Good'\n      }, {\n        key: 'unproven',\n        value: 'Unproven'\n      }],\n      order: 3\n    }), new TextboxQuestion({\n      key: 'firstName',\n      label: 'First name',\n      value: 'Bombasto',\n      required: true,\n      order: 1\n    }), new TextboxQuestion({\n      key: 'emailAddress',\n      label: 'Email',\n      type: 'email',\n      order: 2\n    })];\n    return of(questions.sort((a, b) => a.order - b.order));\n  }\n}\nQuestionService.ɵfac = function QuestionService_Factory(t) {\n  return new (t || QuestionService)();\n};\nQuestionService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: QuestionService,\n  factory: QuestionService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["of","TextboxQuestion","DropDownQuestion","QuestionService","constructor","getQuestions","questions","key","label","options","value","order","required","type","sort","a","b","factory","ɵfac","providedIn"],"sources":["/home/adilson/project/Angular/NotesForProfessional/src/app/chapter2/service/Question.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { of } from 'rxjs';\nimport { QuestionBase } from '../models/QuestionBase';\nimport { TextboxQuestion } from '../models/TextboxQuestion';\nimport { DropDownQuestion } from '../models/DropDownQuestion';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class QuestionService {\n\nconstructor() { }\n\n  getQuestions() {\n\n    const questions: QuestionBase<string>[] = [\n\n      new DropDownQuestion({\n        key: 'brave',\n        label: 'Bravery Rating',\n        options: [\n          { key: 'solid', value: 'Solid' },\n          { key: 'great', value: 'Great' },\n          { key: 'good', value: 'Good' },\n          { key: 'unproven', value: 'Unproven' }\n        ],\n        order: 3\n      }),\n\n      new TextboxQuestion({\n        key: 'firstName',\n        label: 'First name',\n        value: 'Bombasto',\n        required: true,\n        order: 1\n      }),\n\n      new TextboxQuestion({\n        key: 'emailAddress',\n        label: 'Email',\n        type: 'email',\n        order: 2\n      })\n    ];\n\n    return of(questions.sort((a, b) => a.order - b.order));\n  }\n\n}\n"],"mappings":"AACA,SAASA,EAAE,QAAQ,MAAM;AAEzB,SAASC,eAAe,QAAQ,2BAA2B;AAC3D,SAASC,gBAAgB,QAAQ,4BAA4B;;AAK7D,OAAM,MAAOC,eAAe;EAE5BC,YAAA,GAAgB;EAEdC,YAAYA,CAAA;IAEV,MAAMC,SAAS,GAA2B,CAExC,IAAIJ,gBAAgB,CAAC;MACnBK,GAAG,EAAE,OAAO;MACZC,KAAK,EAAE,gBAAgB;MACvBC,OAAO,EAAE,CACP;QAAEF,GAAG,EAAE,OAAO;QAAEG,KAAK,EAAE;MAAO,CAAE,EAChC;QAAEH,GAAG,EAAE,OAAO;QAAEG,KAAK,EAAE;MAAO,CAAE,EAChC;QAAEH,GAAG,EAAE,MAAM;QAAEG,KAAK,EAAE;MAAM,CAAE,EAC9B;QAAEH,GAAG,EAAE,UAAU;QAAEG,KAAK,EAAE;MAAU,CAAE,CACvC;MACDC,KAAK,EAAE;KACR,CAAC,EAEF,IAAIV,eAAe,CAAC;MAClBM,GAAG,EAAE,WAAW;MAChBC,KAAK,EAAE,YAAY;MACnBE,KAAK,EAAE,UAAU;MACjBE,QAAQ,EAAE,IAAI;MACdD,KAAK,EAAE;KACR,CAAC,EAEF,IAAIV,eAAe,CAAC;MAClBM,GAAG,EAAE,cAAc;MACnBC,KAAK,EAAE,OAAO;MACdK,IAAI,EAAE,OAAO;MACbF,KAAK,EAAE;KACR,CAAC,CACH;IAED,OAAOX,EAAE,CAACM,SAAS,CAACQ,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,CAACJ,KAAK,GAAGK,CAAC,CAACL,KAAK,CAAC,CAAC;EACxD;;AArCWR,eAAe,C;mBAAfA,eAAe;AAAA;AAAfA,eAAe,C;SAAfA,eAAe;EAAAc,OAAA,EAAfd,eAAe,CAAAe,IAAA;EAAAC,UAAA,EAFd;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}