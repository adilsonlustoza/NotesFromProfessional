{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport let OrderBy = /*#__PURE__*/(() => {\n  class OrderBy {\n    constructor() {\n      this.value = [];\n    }\n    static _orderByComparator(a, b) {\n      if (a === null || typeof a === 'undefined') a = 0;\n      if (b === null || typeof b === 'undefined') b = 0;\n      if (isNaN(parseFloat(a)) || !isFinite(a) || isNaN(parseFloat(b)) || !isFinite(b)) {\n        //Isn't a number so lowercase the string to properly compare\n        if (a.toLowerCase() < b.toLowerCase()) return -1;\n        if (a.toLowerCase() > b.toLowerCase()) return 1;\n      } else {\n        //Parse strings as numbers to compare properly\n        if (parseFloat(a) < parseFloat(b)) return -1;\n        if (parseFloat(a) > parseFloat(b)) return 1;\n      }\n      return 0; //equal each other\n    }\n\n    transform(input, config = '+') {\n      //make a copy of the input's reference\n      this.value = [...input];\n      let value = this.value;\n      if (!Array.isArray(value)) return value;\n      if (!Array.isArray(config) || Array.isArray(config) && config.length === 1) {\n        let propertyToCheck = !Array.isArray(config) ? config : config[0];\n        let desc = propertyToCheck.substr(0, 1) === '-';\n        //Basic array\n        if (!propertyToCheck || propertyToCheck === '-' || propertyToCheck === '+') {\n          return !desc ? value.sort() : value.sort().reverse();\n        } else {\n          let property = propertyToCheck.substr(0, 1) === '+' || propertyToCheck.substr(0, 1) === '-' ? propertyToCheck.substr(1) : propertyToCheck;\n          return value.sort(function (a, b) {\n            return !desc ? OrderBy._orderByComparator(a[property], b[property]) : -OrderBy._orderByComparator(a[property], b[property]);\n          });\n        }\n      } else {\n        //Loop over property of the array in order and sort\n        return value.sort(function (a, b) {\n          for (let i = 0; i < config.length; i++) {\n            let desc = config[i].substr(0, 1) === '-';\n            let property = config[i].substr(0, 1) === '+' || config[i].substr(0, 1) === '-' ? config[i].substr(1) : config[i];\n            let comparison = !desc ? OrderBy._orderByComparator(a[property], b[property]) : -OrderBy._orderByComparator(a[property], b[property]);\n            //Don't return 0 yet in case of needing to sort by next property\n            if (comparison !== 0) return comparison;\n          }\n          return 0; //equal each other\n        });\n      }\n    }\n  }\n\n  OrderBy.ɵfac = function OrderBy_Factory(t) {\n    return new (t || OrderBy)();\n  };\n  OrderBy.ɵpipe = /*@__PURE__*/i0.ɵɵdefinePipe({\n    name: \"orderBy\",\n    type: OrderBy,\n    pure: true\n  });\n  return OrderBy;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}