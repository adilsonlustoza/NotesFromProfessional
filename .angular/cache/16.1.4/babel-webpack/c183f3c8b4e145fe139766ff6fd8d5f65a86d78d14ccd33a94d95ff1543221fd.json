{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nexport class AuthService {\n  constructor(router) {\n    this.router = router;\n    this.auth = false;\n  }\n  canActivate(currentUser, userId) {\n    if (userId) return true;else {\n      this.router.navigate(['/']);\n      return false;\n    }\n  }\n  canMatch(currentUser) {\n    return true;\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.Router));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["AuthService","constructor","router","auth","canActivate","currentUser","userId","navigate","canMatch","i0","ɵɵinject","i1","Router","factory","ɵfac","providedIn"],"sources":["/home/adilson/project/Angular/NotesForProfessional/src/app/chapter18/services/auth.service.ts"],"sourcesContent":["import { AuthGuard } from './../guards/authguard';\nimport { Injectable, inject } from '@angular/core';\nimport { UserToken } from '../model/UserToken';\nimport { Router } from \"@angular/router\"\n\nexport @Injectable({\n  providedIn: 'root'\n})\nclass AuthService {\n\n  public auth: boolean=false;\n\n  constructor(private router: Router) { }\n\n\n\n  canActivate(currentUser: UserToken, userId: string): boolean {\n\n    if (userId)\n      return true;\n    else {\n      this.router.navigate(['/']);\n      return false;\n    }\n  }\n  canMatch(currentUser: UserToken): boolean {\n    return true;\n  }\n\n\n\n}\n\n"],"mappings":";;AAKA,OAAM,MAGAA,WAAW;EAIfC,YAAoBC,MAAc;IAAd,KAAAA,MAAM,GAANA,MAAM;IAFnB,KAAAC,IAAI,GAAU,KAAK;EAEY;EAItCC,WAAWA,CAACC,WAAsB,EAAEC,MAAc;IAEhD,IAAIA,MAAM,EACR,OAAO,IAAI,CAAC,KACT;MACH,IAAI,CAACJ,MAAM,CAACK,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC;MAC3B,OAAO,KAAK;;EAEhB;EACAC,QAAQA,CAACH,WAAsB;IAC7B,OAAO,IAAI;EACb;;AAnBIL,WAAW,C;mBAAXA,WAAW,EAAAS,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,MAAA;AAAA;AAAXZ,WAAW,C;SAAXA,WAAW;EAAAa,OAAA,EAAXb,WAAW,CAAAc,IAAA;EAAAC,UAAA,EAFH;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}